
 /* ========================================================================= */
 /* em calculation with parent base-size */
 /* ========================================================================= */
 @function em($pixels, $context: $base-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

/* ======================================================================== */
/* rem calculation with html base size */
/* ======================================================================== */
@function rem($pixels, $context: $base-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;

}

/* ======================================================================== */
/* Color Generator */
/* ======================================================================== */
@function colorMap($baseColors, $variations) {
  $colors:();
  
  @each $color, $value in $baseColors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;
    
    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge($colors, (
         #{$color}-#{$lighten}: lighten($value, $percent),
         #{$color}-#{$darken}:  darken($value, $percent)
      ));
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2*100}: $value));
  }
  @return $colors;
}
